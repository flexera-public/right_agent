#
# Copyright (c) 2009-2011 RightScale Inc
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'openssl'

module RightScale
  # Utility class that makes it easier to derive RightAgent identities in a
  # secure, predictable and globally consistent fashion.
  #
  # Given an agent base ID and a secret token shared by all relying parties,
  # the #derive method will generate a public token that can be printed to
  # log files, to a console, or sent in the clear over public networks
  # without compromising the original token. Note that the public token is
  # not guaranteed to be unique; if uniqueness is required (e.g. for an
  # Agent ID) the public token should be combined with the base ID.
  #
  # The #create_verifier method can be used by parties who both possess
  # a secret token to prove their knowledge of the token to one another
  # without disclosing the token. This would facilitate authentication
  # over a public network. Note that this utility class does not
  # implement an entire authentication protocol, it merely facilitates
  # one.
  class SecureIdentity
    # Separator used to differentiate between identity components when serialized
    ID_SEPARATOR = '*'

    # Derive a public Identity Token from a base ID and a secret authentication
    # token. The public token is useful for including in world-readable values such
    # as the name of an agent.
    #
    # Public tokens are generated by taking the SHA1 hash of the base ID and the
    # auth token, separated by a delimeter. Thus a public token can always be
    # deterministically derived from its inputs.
    #
    # === Parameters
    # base_id(Integer):: Numeric ID of the auth token
    # auth_token(String):: Secret authentication token
    #
    # === Return
    # public_token(String):: Public token
    def self.derive(base_id, auth_token)
      sha = OpenSSL::Digest::SHA1.new
      sha.update(base_id.to_s)
      sha.update(ID_SEPARATOR)
      sha.update(auth_token.to_s)
      return sha.hexdigest
    end

    # Create a cryptographic token verifier that can be used to demonstrate to another party
    # that you have knowledge of an authentication token, without disclosing the token itself
    # via a clear-text communications channel. The other party must also possess the secret
    # authentication token so they can compute a corresponding verifier for comparison.
    #
    # THIS METHOD DOES NOT CHECK TOKENS OR TIMESTAMPS FOR YOU; it is only useful to compute
    # the token. The caller must check the outputs, compare the timestamp and make a decision
    # about whether to trust the entity who is supplying the verifier.
    #
    # === Parameters
    # base_id(Integer):: Numeric ID of the auth token
    # auth_token(String):: Secret authentication token
    # timestamp(Time|Integer):: Unix-epoch timestamp to help prevent replay attacks
    #
    # === Return
    # verifier(String):: HMAC-SHA1(base_id, timestamp) keyed using auth_token
    def self.create_verifier(base_id, auth_token, timestamp)
      hmac =  OpenSSL::HMAC.new(auth_token, OpenSSL::Digest::SHA1.new)
      hmac.update(base_id.to_s)
      hmac.update(ID_SEPARATOR)
      hmac.update(timestamp.to_i.to_s)
      return hmac.hexdigest
    end
  end
end
